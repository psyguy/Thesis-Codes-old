vals <- sample.int(size ^ 2, samples)
edge.list <- cbind(vals %/% size + 1, vals %% size)
adj.matrix <- edgelist_to_adjmat(edge.list, recode.ids=FALSE, keep.isolates = F)
adj.matrix
mat <- matrix(0, 10, 10)
mat[el] <- 1
# unit.vector allows to calculate M_i by multiplying it the connectivity matrix
unit.vector <- matrix(0, 4, 1)%rep(1,hight) %>% as.matrix()
# unit.vector allows to calculate M_i by multiplying it the connectivity matrix
unit.vector <- matrix(0, 4, 1)%rep(1,hight) %>% as.matrix()
# unit.vector allows to calculate M_i by multiplying it the connectivity matrix
unit.vector <- matrix(0, 4, 1)#rep(1,hight) %>% as.matrix()
unit.vector
rep(1,hight) %>% as.matrix()
matrix(1, 4, 1)
el  <- cbind(a=1:5, b=5:1) #edgelist (a=origin, b=destination)
mat <- matrix(0, 10, 10)
mat[el] <- 1
mat
mat[edge.list] <- 1
edge.list
mat
samples <- 20
vals <- sample.int(size ^ 2, samples)
edge.list <- cbind(vals %/% size + 1, vals %% size)
mat[edge.list] <- 1
mat
edge.list <- edge.list %>% rbind(edge.list)
mat[edge.list] <- 1
mat
edge.list.rev <- edge.list[,2] %>% cbind(edge.list[,2])
edge.list <- cbind(vals %/% size + 1, vals %% size)
edge.list.rev <- edge.list[,2] %>% cbind(edge.list[,2])
edge.list <- edge.list %>% rbind(edge.list.rev)
adj.matrix <- edgelist_to_adjmat(edge.list, recode.ids=FALSE, keep.isolates = F)
el  <- cbind(a=1:5, b=5:1) #edgelist (a=origin, b=destination)
mat <- matrix(0, 10, 10)
mat[edge.list] <- 1
mat
edge.list
edge.list <- cbind(vals %/% size + 1, vals %% size)
edge.list.rev <- edge.list[,2] %>% cbind(edge.list[,1])
edge.list <- edge.list %>% rbind(edge.list.rev)
el  <- cbind(a=1:5, b=5:1) #edgelist (a=origin, b=destination)
mat <- matrix(0, 10, 10)
mat[edge.list] <- 1
mat
15%/%20
73%/%20
73%/%20+1
73%%20
size = 10
num.links = 20
vals <- sample.int(size ^ 2, num.links + size)
library("Hmisc")
edge.list <- cbind(vals %/% size + 1, vals %% size)
diagonals <- cbind(1:size,1:size)
View(diagonals)
diagonals <- c(1:size)#cbind(1:size,1:size)
edge.list <- cbind(vals %/% size + 1, vals %% size)
data[which(data %nin% diagonals), ]
edge.list[!(edge.list[,1] %in% edge.list[,2]), ]
edge.list <- cbind(vals %/% size + 1, vals %% size) %>% as.data.frame()
edge.list[!(edge.list[,1] %in% edge.list[,2]), ]
for(1 in  1:(size+num.links)){
if(edge.list[i,1]==edge.list[i,2]) edge.list <- edge.list[-i,]
}
for(i in  1:(size+num.links)){
if(edge.list[i,1]==edge.list[i,2]) edge.list <- edge.list[-i,]
}
vals <- sample.int(size ^ 2, num.links + size)
diagonals <- c(1:size)#cbind(1:size,1:size)
edge.list <- cbind(vals %/% size + 1, vals %% size) %>% as.data.frame()
for(i in  1:(size+num.links)){
if(edge.list[i,1]==edge.list[i,2]) edge.list <- edge.list[-i,]
}
View(edge.list)
for(i in  1:(size+num.links)){
if(edge.list[i,1]!=edge.list[i,2]) print(i)
}
for(i in  1:(num.links+size)){
if(edge.list[i,1]==edge.list[i,2]) print(i)
}
for(i in  1:(num.links+size)){
print(edge.list[i,1]==edge.list[i,2])# print(i)
}
edge.list <- cbind(vals %/% size + 1, vals %% size) %>% as.data.frame()
for(i in  1:(num.links+size)){
if(edge.list[i,1]!=edge.list[i,2]) edge.list <- edge.list[-i,]
}
vals <- sample.int(size ^ 2, num.links + size)
diagonals <- c(1:size)#cbind(1:size,1:size)
edge.list <- cbind(vals %/% size + 1, vals %% size) %>% as.data.frame()
for(i in  1:(num.links+size)){
if(edge.list[i,1]!=edge.list[i,2]){
edge.list <- edge.list[-i,]
j <- j + 1}
}
edge.list <- cbind(vals %/% size + 1, vals %% size) %>% as.data.frame()
j <- 0
for(i in  1:(num.links+size)){
if(edge.list[i,1]!=edge.list[i,2]){
edge.list <- edge.list[-i,]
j <- j + 1}
}
edge.list <- cbind(vals %/% size + 1, vals %% size) %>% as.data.frame()
j <- 0
for(i in  1:(num.links+size)){
if(edge.list[i+j,1]!=edge.list[i+j,2]){
edge.list <- edge.list[-i,]
j <- j + 1}
}
edge.list <- cbind(vals %/% size + 1, vals %% size) %>% as.data.frame()
j <- 0
for(i in  1:(num.links+size)){
if(edge.list[i-j,1]!=edge.list[i-j,2]){
edge.list <- edge.list[-i,]
j <- j + 1}
}
View(edge.list)
vals <- sample.int(size ^ 2, num.links + size)
edge.list <- cbind(vals %/% size + 1, vals %% size) %>% as.data.frame()
j <- 0
for(i in  1:(num.links+size)){
if(edge.list[i-j,1]!=edge.list[i-j,2]){
edge.list <- edge.list[-(i-j),]
j <- j + 1}
}
edge.list <- cbind(vals %/% size + 1, vals %% size) %>% as.data.frame()
for(i in  1:(num.links+size)){
if(edge.list[i,1]!=edge.list[i,2]) edge.list <- NA
}
edge.list <- cbind(vals %/% size + 1, vals %% size) %>% as.data.frame()
for(i in  1:(num.links+size)){
if(edge.list[i,1]!=edge.list[i,2]) edge.list[i,] <- NA
}
edge.list <- edge.list %>% na.omit()
View(graph)
View(edge.list)
edge.list <- cbind(vals %/% size + 1, vals %% size) %>% as.data.frame()
for(i in  1:(num.links+size)){
if(edge.list[i,1]==edge.list[i,2]) edge.list[i,] <- NA
}
edge.list <- edge.list %>% na.omit()
edge.list <- edge.list[1:num.links,]
edge.list.rev <- edge.list[,2] %>% cbind(edge.list[,1])
edge.list.symmetric <- edge.list %>% rbind(edge.list.rev)
adj.matrix <- matrix(0, size, size)
adj.matrix[edge.list.symmetric] <- 1
diag(adj.matrix)
View(adj.matrix)
adj.matrix[edge.list.symmetric] <- 1
edge.list.symmetric <- edge.list %>% rbind(edge.list.rev)
edge.list.rev <- edge.list[,2] %>% cbind(edge.list[,1])
edge.list.symmetric <- edge.list %>% rbind(edge.list.rev)
rm(edge.list.symmetric)
edge.list.symmetric <- edge.list %>% rbind(edge.list.rev)
edge.list.rev
edge.list
xx <- edge.list %>% rbind(edge.list.rev)
edge.list <- cbind(vals %/% size + 1, vals %% size)
for(i in  1:(num.links+size)){
if(edge.list[i,1]==edge.list[i,2]) edge.list[i,] <- NA
}
edge.list <- edge.list %>% na.omit()
edge.list <- edge.list[1:num.links,]
edge.list.rev <- edge.list[,2] %>% cbind(edge.list[,1])
xx <- edge.list %>% rbind(edge.list.rev)
edge.list <- edge.list %>% na.omit()
edge.list <- edge.list[1:num.links,]
edge.list.rev <- edge.list[,2] %>% cbind(edge.list[,1])
edge.list.symmetric <- edge.list %>% rbind(edge.list.rev)
adj.matrix <- matrix(0, size, size)
adj.matrix[edge.list.symmetric] <- 1
View(adj.matrix)
adj.matrix %>% sum() %>% sum()
edge.list <- edge.list[1:num.links,]
edge.list.rev <- edge.list[,2] %>% cbind(edge.list[,1])
edge.list.symmetric <- edge.list %>% rbind(edge.list.rev)
adj.matrix <- matrix(0, size, size)
adj.matrix[edge.list.symmetric] <- 1
View(adj.matrix)
edge.list[1:num.links,]
rm(edge.list.symmetric)
rm(adj.matrix)
edge.list <- edge.list %>% na.omit()
edge.list <- edge.list[1:num.links,]
edge.list.rev <- edge.list[,2] %>% cbind(edge.list[,1])
edge.list.symmetric <- edge.list %>% rbind(edge.list.rev)
adj.matrix <- matrix(0, size, size)
adj.matrix[edge.list.symmetric] <- 1
adj.matrix %>% sum() %>% sum()
size = 5
num.links = 10
size = 3
num.links = 3
vals <- sample.int(size ^ 2, num.links + size)
diagonals <- c(1:size)#cbind(1:size,1:size)
edge.list <- cbind(vals %/% size + 1, vals %% size)
for(i in  1:(num.links+size)){
if(edge.list[i,1]==edge.list[i,2]) edge.list[i,] <- NA
}
edge.list <- edge.list %>% na.omit()
edge.list <- edge.list[1:num.links,]
edge.list.rev <- edge.list[,2] %>% cbind(edge.list[,1])
edge.list.symmetric <- edge.list %>% rbind(edge.list.rev)
adj.matrix <- matrix(0, size, size)
adj.matrix[edge.list.symmetric] <- 1
adj.matrix %>% sum() %>% sum()
View(edge.list)
vals <- sample.int(size ^ 2, num.links + size)
diagonals <- c(1:size)#cbind(1:size,1:size)
edge.list <- cbind(vals %/% size + 1, vals %% size + 1)
for(i in  1:(num.links+size)){
if(edge.list[i,1]==edge.list[i,2]) edge.list[i,] <- NA
}
edge.list <- edge.list %>% na.omit()
edge.list <- edge.list[1:num.links,]
edge.list.rev <- edge.list[,2] %>% cbind(edge.list[,1])
edge.list.symmetric <- edge.list %>% rbind(edge.list.rev)
adj.matrix <- matrix(0, size, size)
adj.matrix[edge.list.symmetric] <- 1
adj.matrix %>% sum() %>% sum()
View(edge.list)
edge.list <- edge.list %>% na.omit()
edge.list <- edge.list[1:num.links,]
edge.list.rev <- edge.list[,2] %>% cbind(edge.list[,1])
edge.list.symmetric <- edge.list %>% rbind(edge.list.rev)
adj.matrix <- matrix(0, size, size)
adj.matrix[edge.list.symmetric] <- 1
View(edge.list.symmetric)
adj.matrix[edge.list.symmetric]
adj.matrix[edge.list]
vals <- sample.int(size ^ 2, num.links + size)
diagonals <- c(1:size)#cbind(1:size,1:size)
edge.list <- cbind(vals %/% size + 0, vals %% size + 1)
for(i in  1:(num.links+size)){
if(edge.list[i,1]==edge.list[i,2]) edge.list[i,] <- NA
}
edge.list <- edge.list %>% na.omit()
edge.list <- edge.list[1:num.links,]
edge.list.rev <- edge.list[,2] %>% cbind(edge.list[,1])
edge.list.symmetric <- edge.list %>% rbind(edge.list.rev)
adj.matrix <- matrix(0, size, size)
adj.matrix[edge.list.symmetric] <- 1
View(adj.matrix)
View(adj.matrix)
num.links = 100
size = 20
vals <- sample.int(size ^ 2, num.links + size)
diagonals <- c(1:size)#cbind(1:size,1:size)
edge.list <- cbind(vals %/% size + 0, vals %% size + 1)
for(i in  1:(num.links+size)){
if(edge.list[i,1]==edge.list[i,2]) edge.list[i,] <- NA
}
edge.list <- edge.list %>% na.omit()
edge.list <- edge.list[1:num.links,]
edge.list.rev <- edge.list[,2] %>% cbind(edge.list[,1])
edge.list.symmetric <- edge.list %>% rbind(edge.list.rev)
adj.matrix <- matrix(0, size, size)
adj.matrix[edge.list.symmetric] <- 1
adj.matrix %>% sum() %>% sum()
diag(adj.matrix)
edge.list
edge.list <- cbind(vals %/% size + 0, vals %% size + 1)
for(i in  1:(num.links+size)){
if(edge.list[i,1]==edge.list[i,2]) edge.list[i,] <- NA
}
edge.list <- edge.list %>% na.omit()
edge.list <- edge.list[1:num.links,]
edge.list.rev <- edge.list[,2] %>% cbind(edge.list[,1])
edge.list <- edge.list %>% group_by(1,2) %>% unique()
edge.list <- unique(edge.list[ , 1:2 ] )
vals <- sample.int(size ^ 2, num.links + size)
diagonals <- c(1:size)#cbind(1:size,1:size)
edge.list <- cbind(vals %/% size + 0, vals %% size + 1)
for(i in  1:(num.links+size)){
if(edge.list[i,1]==edge.list[i,2]) edge.list[i,] <- NA
}
edge.list <- edge.list %>% na.omit()
edge.list <- unique(edge.list[ , 1:2 ] )
edge.list <- edge.list[1:num.links,]
edge.list.rev <- edge.list[,2] %>% cbind(edge.list[,1])
edge.list.symmetric <- edge.list %>% rbind(edge.list.rev)
adj.matrix <- matrix(0, size, size)
adj.matrix[edge.list.symmetric] <- 1
adj.matrix %>% sum() %>% sum()
diag(adj.matrix)
adj.matrix %>% return()
adj.matrix %>% sum() %>% sum()
View(edge.list)
n
vals <- sample.int(size ^ 2, num.links + size)
diagonals <- c(1:size)#cbind(1:size,1:size)
edge.list <- cbind(vals %/% size + 0, vals %% size + 1)
for(i in  1:(num.links+size)){
if(edge.list[i,1]==edge.list[i,2]) edge.list[i,] <- NA
}
edge.list <- edge.list %>% na.omit()
edge.list <- edge.list[1:num.links,]
edge.list.rev <- edge.list[,2] %>% cbind(edge.list[,1])
edge.list.symmetric <- edge.list %>% rbind(edge.list.rev)
edge.list.symmetric <- unique(edge.list.symmetric[ , 1:2 ] )
edge.list <- cbind(vals %/% size + 0, vals %% size + 1)
for(i in  1:(num.links+size)){
if(edge.list[i,1]==edge.list[i,2]) edge.list[i,] <- NA
}
edge.list <- edge.list %>% na.omit()
edge.list.rev <- edge.list[,2] %>% cbind(edge.list[,1])
edge.list.symmetric <- edge.list %>% rbind(edge.list.rev)
edge.list.symmetric <- unique(edge.list.symmetric[ , 1:2 ] )
adj.matrix <- matrix(0, size, size)
adj.matrix[edge.list.symmetric] <- 1
adj.matrix %>% sum() %>% sum()
diag(adj.matrix)
adj.matrix %>% return()
adj.matrix %>% sum() %>% sum()
library(dplyr)
library("Hmisc")
make.random.graph <- function(size = 20, num.links = 100){
vals <- sample.int(size ^ 2, num.links + size)
diagonals <- c(1:size)#cbind(1:size,1:size)
edge.list <- cbind(vals %/% size + 0, vals %% size + 1)
for(i in  1:(num.links+size)){
if(edge.list[i,1]==edge.list[i,2]) edge.list[i,] <- NA
}
edge.list <- edge.list %>% na.omit()
# edge.list <- edge.list[1:num.links,]
#
# edge.list <- unique(edge.list[ , 1:2 ] )
edge.list.rev <- edge.list[,2] %>% cbind(edge.list[,1])
edge.list.symmetric <- edge.list %>% rbind(edge.list.rev)
edge.list.symmetric <- unique(edge.list.symmetric[ , 1:2 ] )
adj.matrix <- matrix(0, size, size)
adj.matrix[edge.list.symmetric] <- 1
# adj.matrix %>% sum() %>% sum()
#
# diag(adj.matrix)
adj.matrix %>% return()
}
library(dplyr)
ln(10)
log(10)
log(e)
log(exp(1))
log(50)
log(300)*150
5200/log(300)*150
5200/log(300)/150
L_c <- 5200
N <- 300
Time <- 1000
rm(Time)
conn <- make.random.graph(size = N, num.links = L_c)
for (i in 1:T_) {
x.temp <- x %>% GongvLeeuwen2004.logistic(conn)
x <- x %>% cbind(x.temp)
}
T_ <- 1000
x.init <- N %>% dunif(-1,1)
for (i in 1:T_) {
x <- x.init %>% GongvLeeuwen2004.logistic(conn)
x <- x %>% cbind(x)
}
x.init <- N %>% dunif(-1,1)
x.out <- x.init
for (i in 1:T_) {
x <- x.out %>% GongvLeeuwen2004.logistic(conn)
x.out <- x %>% cbind(x)
}
x.init <- N %>% dunif(-1,1)
x.init <- N %>% runif(-1,1)
x.out <- x.init
for (i in 1:T_) {
x <- x.out %>% GongvLeeuwen2004.logistic(conn)
x.out <- x %>% cbind(x)
}
GongvLeeuwen2004.logistic <- function(x.input, connectivity.matrix, a = 1.7, eps = 0.8, order = 0){
# eps: coupling strength
inp.dim <- x.input %>% dim()
hight <- inp.dim[1]
leng <- inp.dim[2]
x.now <- x.input[,leng]
# Higher orders are not implemented yet
#if(order) x <- x.input[,len-order:len]
# unit.vector allows to calculate M_i by multiplying it the connectivity matrix
unit.vector <- matrix(1, hight, 1)
M <- connectivity.matrix %*% unit.vector
fx <- x.now %>% func.1() %>% as.matrix()
x.next <- (1 - eps)*fx + connectivity.matrix %*% fx*eps / M
x.next %>% return()
}
for (i in 1:T_) {
x <- x.out %>% GongvLeeuwen2004.logistic(conn)
x.out <- x %>% cbind(x)
}
x.init <- N %>% runif(-1,1)
x.out <- x.init
for (i in 1:T_) {
x <- x.out %>% GongvLeeuwen2004.logistic(conn)
x.out <- x %>% cbind(x)
}
# eps: coupling strength
x.input <- x.init
inp.dim <- x.input %>% dim()
hight <- inp.dim[1]
leng <- inp.dim[2]
x.now <- x.input[,leng]
if(is.null(leng)) leng <- 1
x.now <- x.input[,leng]
if(is.null(height)) height <- x.input %>% length()
# eps: coupling strength
x.input <- x.init
inp.dim <- x.input %>% dim()
height <- inp.dim[1]
leng <- inp.dim[2]
if(is.null(height)) height <- x.input %>% length()
if(is.null(leng)) x.now <- x.input
else  x.now <- x.input[,leng]
if(is.null(leng)) {x.now <- x.input}
else  x.now <- x.input[,leng]
# eps: coupling strength
x.input <- x.init
inp.dim <- x.input %>% dim()
height <- inp.dim[1]
leng <- inp.dim[2]
if(!is.null(leng)) x.now <- x.input[,leng]
if(is.null(height)) height <- x.input %>% length()
if(is.null(leng)) x.now <- x.input
# unit.vector allows to calculate M_i by multiplying it the connectivity matrix
unit.vector <- matrix(1, height, 1)
M <- connectivity.matrix %*% unit.vector
fx <- x.now %>% func.1() %>% as.matrix()
connectivity.matrix <- conn
# unit.vector allows to calculate M_i by multiplying it the connectivity matrix
unit.vector <- matrix(1, height, 1)
M <- connectivity.matrix %*% unit.vector
fx <- x.now %>% func.1() %>% as.matrix()
x.next <- (1 - eps)*fx + connectivity.matrix %*% fx*eps / M
eps = 0.8
a = 1.7
# unit.vector allows to calculate M_i by multiplying it the connectivity matrix
unit.vector <- matrix(1, height, 1)
M <- connectivity.matrix %*% unit.vector
fx <- x.now %>% func.1() %>% as.matrix()
x.next <- (1 - eps)*fx + connectivity.matrix %*% fx*eps / M
library(dplyr)
GongvLeeuwen2004.logistic <- function(x.input, connectivity.matrix, a = 1.7, eps = 0.8, order = 0){
# eps: coupling strength
x.input <- x.init
connectivity.matrix <- conn
inp.dim <- x.input %>% dim()
height <- inp.dim[1]
leng <- inp.dim[2]
if(!is.null(leng)) x.now <- x.input[,leng]
if(is.null(height)) height <- x.input %>% length()
if(is.null(leng)) x.now <- x.input
# Higher orders are not implemented yet
#if(order) x <- x.input[,len-order:len]
# unit.vector allows to calculate M_i by multiplying it the connectivity matrix
unit.vector <- matrix(1, height, 1)
M <- connectivity.matrix %*% unit.vector
fx <- x.now %>% func.1() %>% as.matrix()
x.next <- (1 - eps)*fx + connectivity.matrix %*% fx*eps / M
x.next %>% return()
}
func.1 <- function(x, a = 1.7){1 - a*(x^2)}
library(dplyr)
GongvLeeuwen2004.logistic <- function(x.input, connectivity.matrix, a = 1.7, eps = 0.8, order = 0){
# eps: coupling strength
inp.dim <- x.input %>% dim()
height <- inp.dim[1]
leng <- inp.dim[2]
if(!is.null(leng)) x.now <- x.input[,leng]
if(is.null(height)) height <- x.input %>% length()
if(is.null(leng)) x.now <- x.input
# Higher orders are not implemented yet
#if(order) x <- x.input[,len-order:len]
# unit.vector allows to calculate M_i by multiplying it the connectivity matrix
unit.vector <- matrix(1, height, 1)
M <- connectivity.matrix %*% unit.vector
fx <- x.now %>% func.1() %>% as.matrix()
x.next <- (1 - eps)*fx + connectivity.matrix %*% fx*eps / M
x.next %>% return()
}
func.1 <- function(x, a = 1.7){1 - a*(x^2)}
L_c <- 5200
N <- 300
T_ <- 1000
conn <- make.random.graph(size = N, num.links = L_c)
x.init <- N %>% runif(-1,1)
x.out <- x.init
for (i in 1:T_) {
x <- x.out %>% GongvLeeuwen2004.logistic(conn)
x.out <- x %>% cbind(x)
}
View(x.out)
L_c <- 5200
N <- 300
T_ <- 1000
conn <- make.random.graph(size = N, num.links = L_c)
x.init <- N %>% runif(-1,1)
x.out <- x.init
for (i in 1:T_) {
x.temp <- x.out %>% GongvLeeuwen2004.logistic(conn)
x.out <- x.out %>% cbind(x.temp)
}
View(x.out)
x.out %>% dim
rm(list=ls())
save.image
save.image()
